// <auto-generated />
using System;
using LabBridge.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LabBridge.Infrastructure.Migrations
{
    [DbContext(typeof(AuditDbContext))]
    [Migration("20251027120443_InitialAuditSchema")]
    partial class InitialAuditSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LabBridge.Infrastructure.Data.Entities.AuditLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("ErrorStackTrace")
                        .HasColumnType("text");

                    b.Property<string>("FhirDiagnosticReportJson")
                        .HasColumnType("text");

                    b.Property<string>("FhirObservationsJson")
                        .HasColumnType("text");

                    b.Property<string>("FhirPatientJson")
                        .HasColumnType("text");

                    b.Property<string>("FhirServerUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MessageControlId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PatientId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ProcessingDurationMs")
                        .HasColumnType("bigint");

                    b.Property<string>("RawHl7Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<string>("SourceSystem")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("MessageControlId")
                        .HasDatabaseName("IX_AuditLogs_MessageControlId");

                    b.HasIndex("MessageType")
                        .HasDatabaseName("IX_AuditLogs_MessageType");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("IX_AuditLogs_PatientId");

                    b.HasIndex("ReceivedAt")
                        .HasDatabaseName("IX_AuditLogs_ReceivedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_AuditLogs_Status");

                    b.HasIndex("PatientId", "ReceivedAt")
                        .HasDatabaseName("IX_AuditLogs_PatientId_ReceivedAt");

                    b.ToTable("AuditLogs", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
